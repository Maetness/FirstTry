Step by step auf neuer VM
#updaten
sudo apt update & upgrade
#git und repo klonen
sudo install git damit das Repo mit Config Files da ist
clone https://github.com/Maetness/FirstTry auf den Desktop

#docker
https://docs.docker.com/engine/install/ubuntu/
#uninstall older versions
sudo apt-get remove docker docker-engine docker.io containerd runc
sudo apt-get update
sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin

#curl and kubectl
https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#install-kubectl-binary-with-curl-on-linux
sudo apt-get update
sudo apt-get install -y ca-certificates curl
sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubectl


#K3D
curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash


#falls sudo vergessen wird
chmod 666 /var/run/docker.sock

#swap disable
sudo swapoff -a 

#ins Verzeichnis mit dem K3D Config file wechseln, it complains about alpha4 but does not actually work with it.
k3d cluster create --config k3d.yaml 


#php app schreiben und containerisieren
dockerfile:
FROM php:5-apache
COPY index.php /var/www/html/index.php
RUN chmod a+rx index.php

index.php 
<?php
  $x = 0.0001;
  for ($i = 0; $i <= 1000000; $i++) {
    $x += sqrt($x);
  }
  echo "OK!";
?>

#create php image

docker image build -t mattness/php_app

#eventuell noch ins dockerhup pushen. 

#deployment welches das php image verwendet.

kubectl apply -f ./php-app.yaml


hpa automatically scales the number of pods for our deployment (app) to match observed metric specified (cpu). 
Roughly speaking, the HPA controller will increase and decrease the number of replicas (by updating the Deployment) to maintain an average 
CPU utilization across all Pods of 50%. The Deployment then updates the ReplicaSet - this is part of how all Deployments work in Kubernetes - 
and then the ReplicaSet either adds or removes Pods based on the change to its .spec.


#metric server
kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

#create hpa 
kubectl autoscale deployment php-app --cpu-percent=50 --min=1 --max=10
#check status
kubectl get hpa

#increase load in extra terminal window
kubectl run -i --tty load-generator --rm --image=busybox:1.28 --restart=Never -- /bin/sh -c "while sleep 0.01; do wget -q -O- http://php-app; done"

#continuously watch hpa 
kubectl get hpa php-app --watch

#observe changed replica number
kubectl get deployment php-app

#shutdown busyload deployment 
ctrl+c


#wait a couple of minutes and observe downscaling
kubectl get hpa php-app --watch 


k9s:
#install brew
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#add to path 
Run these two commands in your terminal to add Homebrew to your PATH:
    echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> /home/dev/.profile
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"


#dependencies
sudo apt-get install build-essential
#install gcc
brew install gcc
#install k9s
 brew install derailed/k9s/k9s
 
 does brew add too much overhead?

